# 大テーマ（背景）
軽量AIは、星辰詩語システムにおけるユーザー補助AIであり、観測者AIとは異なり、低負荷・省メモリでリアルタイム応答が求められる。  
主な役割は UI補助、通知の振り分け、入力の一時保存と送信、詩幣関連情報の提示である。

# 小テーマ（今回の目的）
Gemini に軽量AIの設計要件を与えたとき、どのような開発ステップ・構成・優先度を提示するかを観察する。  
特に、レイヤー構造・JWT認証・Petalログとの連携の処理がどう整理されるかに注目する。

# 与える仕様（ver 0.3 要約）

## 全体概要
- 軽量AIは観測者AIの補助役である。
- 詩幣やCP（通貨）通知、メッセージの中継と整形を担う。
- 署名付きログ（Petal）との連携が必要。
- JWTによる権限制御を予定。

## 要求機能（抜粋）

1. メッセージステータス管理  
   - `下書き`・`送信予約`・`送信済み` の3段階  
   - CPは予約時に消費

2. 通知レイヤー制御（5階層）  
   - Critical / High / Medium / Low / Noise  
   - リリフォンUIと連動

3. 非同期送信キュー  
   - 軽量AI → 観測者AI に転送する非同期処理
   - メッセージには `urgency`, `visibility`, `sentiment` のJSONメタ情報付き

4. Petal連携
   - 送信済みログは署名付きでPetalへ保存（署名方式：Ed25519）
   - Petalからの観測ログ取得も想定

5. 認証方式切替
   - API Key 方式と JWT 認証を切替可能に
   - `.env` / `direnv` に対応

# 出力してほしいこと

- 軽量AIの開発計画（段階的に：プロトタイプ → 本実装）
- 構成案（アーキテクチャ、レイヤー、データフローなど）
- 優先度づけ（何から実装すべきか）
- 技術的な懸念点と代替案
- CLI環境での運用想定（補足があれば）

# 出力形式（できれば）

```markdown
## 概要
...

## 提案構成（構成図または段階）
...

## 開発ステップ（順序と理由付き）
1. ...
2. ...
...

## 技術課題と代替案
...
